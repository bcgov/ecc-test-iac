import { error } from "console";

let clientArray = [
  {
    clientId: "childcare-ecer-test",
    name: "ECER Portal Client",
    description: "",
    rootUrl: "",
    adminUrl: "",
    baseUrl: "https://test.myeceregistry.gov.bc.ca",
    surrogateAuthRequired: false,
    enabled: true,
    alwaysDisplayInConsole: false,
    clientAuthenticatorType: "client-secret",
    redirectUris: [
      "",
      "https://test.myeceregistry.gov.bc.ca/*",
      "https://uat-ecer-registry-portal.apps.silver.devops.gov.bc.ca/*",
      "https://test-ecer-registry-portal.apps.silver.devops.gov.bc.ca/*",
      "https://uat.myeceregistry.gov.bc.ca/*",
      "https://efxtest-ecer-registry-portal.apps.silver.devops.gov.bc.ca/*",
    ],
    webOrigins: ["+"],
    notBefore: 0,
    bearerOnly: false,
    consentRequired: false,
    standardFlowEnabled: true,
    implicitFlowEnabled: false,
    directAccessGrantsEnabled: true,
    serviceAccountsEnabled: false,
    publicClient: true,
    frontchannelLogout: false,
    protocol: "openid-connect",
    attributes: {
      "saml.multivalued.roles": "false",
      "saml.force.post.binding": "false",
      "frontchannel.logout.session.required": "false",
      "post.logout.redirect.uris": "+",
      "oauth2.device.authorization.grant.enabled": "false",
      "backchannel.logout.revoke.offline.tokens": "false",
      "saml.server.signature.keyinfo.ext": "false",
      "use.refresh.tokens": "true",
      "oidc.ciba.grant.enabled": "false",
      "backchannel.logout.session.required": "true",
      "client_credentials.use_refresh_token": "false",
      "saml.client.signature": "false",
      "require.pushed.authorization.requests": "false",
      "saml.allow.ecp.flow": "false",
      "saml.assertion.signature": "false",
      "id.token.as.detached.signature": "false",
      "saml.encrypt": "false",
      "saml.server.signature": "false",
      "exclude.session.state.from.auth.response": "false",
      "saml.artifact.binding": "false",
      saml_force_name_id_format: "false",
      "tls.client.certificate.bound.access.tokens": "false",
      "acr.loa.map": "{}",
      "saml.authnstatement": "false",
      "display.on.consent.screen": "false",
      "token.response.type.bearer.lower-case": "false",
      "saml.onetimeuse.condition": "false",
    },
    authenticationFlowBindingOverrides: {},
    fullScopeAllowed: true,
    nodeReRegistrationTimeout: -1,
    protocolMappers: [
      {
        name: "sub",
        protocol: "openid-connect",
        protocolMapper: "oidc-usermodel-attribute-mapper",
        consentRequired: false,
        config: {
          "userinfo.token.claim": "true",
          "user.attribute": "sub",
          "id.token.claim": "true",
          "access.token.claim": "true",
          "claim.name": "sub",
          "jsonType.label": "String",
        },
      },
      {
        name: "identity_provider",
        protocol: "openid-connect",
        protocolMapper: "oidc-usermodel-attribute-mapper",
        consentRequired: false,
        config: {
          "userinfo.token.claim": "false",
          "user.attribute": "identity_provider",
          "id.token.claim": "true",
          "access.token.claim": "true",
          "claim.name": "identity_provider",
          "jsonType.label": "String",
        },
      },
      {
        name: "audience",
        protocol: "openid-connect",
        protocolMapper: "oidc-audience-mapper",
        consentRequired: false,
        config: {
          "included.client.audience": "childcare-ecer-test",
          "id.token.claim": "false",
          "access.token.claim": "true",
          "included.custom.audience": "aud",
          "userinfo.token.claim": "false",
        },
      },
    ],
    defaultClientScopes: ["address", "profile", "email"],
    optionalClientScopes: [],
    access: {
      view: true,
      configure: true,
      manage: true,
    },
  },
  {
    clientId: "childcare-ecer-api-test",
    name: "Dataverse API User",
    description: "",
    rootUrl: "",
    adminUrl: "",
    baseUrl: "",
    surrogateAuthRequired: false,
    enabled: true,
    alwaysDisplayInConsole: false,
    clientAuthenticatorType: "client-secret",
    redirectUris: ["*"],
    webOrigins: [],
    notBefore: 0,
    bearerOnly: false,
    consentRequired: false,
    standardFlowEnabled: false,
    implicitFlowEnabled: false,
    directAccessGrantsEnabled: false,
    serviceAccountsEnabled: true,
    publicClient: false,
    frontchannelLogout: false,
    protocol: "openid-connect",
    attributes: {
      "saml.multivalued.roles": "false",
      "saml.force.post.binding": "false",
      "frontchannel.logout.session.required": "false",
      "post.logout.redirect.uris": "+",
      "oauth2.device.authorization.grant.enabled": "false",
      "backchannel.logout.revoke.offline.tokens": "false",
      "saml.server.signature.keyinfo.ext": "false",
      "use.refresh.tokens": "true",
      "oidc.ciba.grant.enabled": "false",
      "backchannel.logout.session.required": "true",
      "client_credentials.use_refresh_token": "false",
      "saml.client.signature": "false",
      "require.pushed.authorization.requests": "false",
      "saml.allow.ecp.flow": "false",
      "saml.assertion.signature": "false",
      "id.token.as.detached.signature": "false",
      "saml.encrypt": "false",
      "saml.server.signature": "false",
      "exclude.session.state.from.auth.response": "false",
      "saml.artifact.binding": "false",
      saml_force_name_id_format: "false",
      "tls.client.certificate.bound.access.tokens": "false",
      "acr.loa.map": "{}",
      "saml.authnstatement": "false",
      "display.on.consent.screen": "false",
      "token.response.type.bearer.lower-case": "false",
      "saml.onetimeuse.condition": "false",
    },
    authenticationFlowBindingOverrides: {},
    fullScopeAllowed: true,
    nodeReRegistrationTimeout: -1,
    protocolMappers: [
      {
        name: "audience",
        protocol: "openid-connect",
        protocolMapper: "oidc-audience-mapper",
        consentRequired: false,
        config: {
          "included.client.audience": "childcare-ecer-api-test",
          "id.token.claim": "false",
          "access.token.claim": "true",
          "userinfo.token.claim": "false",
        },
      },
      {
        name: "Client ID",
        protocol: "openid-connect",
        protocolMapper: "oidc-usersessionmodel-note-mapper",
        consentRequired: false,
        config: {
          "user.session.note": "clientId",
          "userinfo.token.claim": "true",
          "id.token.claim": "true",
          "access.token.claim": "true",
          "claim.name": "clientId",
          "jsonType.label": "String",
        },
      },
      {
        name: "Client IP Address",
        protocol: "openid-connect",
        protocolMapper: "oidc-usersessionmodel-note-mapper",
        consentRequired: false,
        config: {
          "user.session.note": "clientAddress",
          "userinfo.token.claim": "true",
          "id.token.claim": "true",
          "access.token.claim": "true",
          "claim.name": "clientAddress",
          "jsonType.label": "String",
        },
      },
      {
        name: "Client Host",
        protocol: "openid-connect",
        protocolMapper: "oidc-usersessionmodel-note-mapper",
        consentRequired: false,
        config: {
          "user.session.note": "clientHost",
          "userinfo.token.claim": "true",
          "id.token.claim": "true",
          "access.token.claim": "true",
          "claim.name": "clientHost",
          "jsonType.label": "String",
        },
      },
    ],
    defaultClientScopes: [],
    optionalClientScopes: [],
    access: {
      view: true,
      configure: true,
      manage: true,
    },
  },
  {
    clientId: "childcare-ecer-ew-test",
    name: "EW API User",
    description: "",
    rootUrl: "",
    adminUrl: "",
    baseUrl: "",
    surrogateAuthRequired: false,
    enabled: true,
    alwaysDisplayInConsole: false,
    clientAuthenticatorType: "client-secret",
    redirectUris: ["/*"],
    webOrigins: ["/*"],
    notBefore: 0,
    bearerOnly: false,
    consentRequired: false,
    standardFlowEnabled: false,
    implicitFlowEnabled: false,
    directAccessGrantsEnabled: false,
    serviceAccountsEnabled: true,
    publicClient: false,
    frontchannelLogout: true,
    protocol: "openid-connect",
    attributes: {
      "oidc.ciba.grant.enabled": "false",
      "backchannel.logout.session.required": "true",
      "oauth2.device.authorization.grant.enabled": "false",
      "display.on.consent.screen": "false",
      "backchannel.logout.revoke.offline.tokens": "false",
    },
    authenticationFlowBindingOverrides: {},
    fullScopeAllowed: true,
    nodeReRegistrationTimeout: -1,
    protocolMappers: [
      {
        name: "Client Host",
        protocol: "openid-connect",
        protocolMapper: "oidc-usersessionmodel-note-mapper",
        consentRequired: false,
        config: {
          "user.session.note": "clientHost",
          "introspection.token.claim": "true",
          "userinfo.token.claim": "true",
          "id.token.claim": "true",
          "access.token.claim": "true",
          "claim.name": "clientHost",
          "jsonType.label": "String",
        },
      },
      {
        name: "Client IP Address",
        protocol: "openid-connect",
        protocolMapper: "oidc-usersessionmodel-note-mapper",
        consentRequired: false,
        config: {
          "user.session.note": "clientAddress",
          "introspection.token.claim": "true",
          "userinfo.token.claim": "true",
          "id.token.claim": "true",
          "access.token.claim": "true",
          "claim.name": "clientAddress",
          "jsonType.label": "String",
        },
      },
      {
        name: "audience",
        protocol: "openid-connect",
        protocolMapper: "oidc-audience-mapper",
        consentRequired: false,
        config: {
          "included.client.audience": "childcare-ecer-ew-test",
          "introspection.token.claim": "true",
          "userinfo.token.claim": "false",
          "id.token.claim": "false",
          "lightweight.claim": "false",
          "access.token.claim": "true",
        },
      },
      {
        name: "Client ID",
        protocol: "openid-connect",
        protocolMapper: "oidc-usersessionmodel-note-mapper",
        consentRequired: false,
        config: {
          "user.session.note": "client_id",
          "introspection.token.claim": "true",
          "userinfo.token.claim": "true",
          "id.token.claim": "true",
          "access.token.claim": "true",
          "claim.name": "client_id",
          "jsonType.label": "String",
        },
      },
    ],
    defaultClientScopes: [],
    optionalClientScopes: [],
    access: {
      view: true,
      configure: true,
      manage: true,
    },
  },
];

function getTestClientJson(clientId) {
  let client = clientArray.find((client) => client.clientId === clientId);
  if (!client) {
    throw error(`Client ID ${clientId} not found in JSON data`);
  }
  return client;
}

export { getTestClientJson };
