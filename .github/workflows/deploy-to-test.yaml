name: Promote to Test

env:
  # 🖊️ EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  OPENSHIFT_SERVER: ${{ vars.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: ${{ secrets.ECER_NAMESPACE_NO_ENV }}-tools
  APP_ENVIRONMENT_SOURCE: "dev"
  APP_ENVIRONMENT_DESTINATION: "test"

on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:
    inputs:
      promote_registry_portal:
        description: "Promote Registry Portal?"
        required: false
        type: boolean
        default: false
      promote_api:
        description: "Promote API?"
        required: false
        type: boolean
        default: false

jobs:
  openshift-cd:
    name: Promote Image
    runs-on: ubuntu-22.04
    environment: test

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4

        # https://github.com/redhat-actions/oc-login#readme
      - name: Tag in OpenShift
        run: |
          set -eux
          # Login to OpenShift and select project
          oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
          oc project ${{ env.OPENSHIFT_NAMESPACE }}

          echo promoting ${{env.APP_ENVIRONMENT_SOURCE}} imagestream to ${{env.APP_ENVIRONMENT_DESTINATION}}

          # Define a reusable function for promotion
          promote_component() {
            local component_name="$1"
            echo "Attempting to promote $component_name..."

            # Check if the imagestream exists before trying to get its SHA
            if ! oc get is "$component_name" -n ${{env.OPENSHIFT_NAMESPACE}} &>/dev/null; then
              echo "Imagestream '$component_name' does not exist in namespace ${{env.OPENSHIFT_NAMESPACE}}. Skipping promotion for this component."
              return 1 # Indicate failure to promote this component
            fi

            local IMAGE_SHA=$(oc get is "$component_name" -o json | jq -r '.spec.tags[] | select(.name == "${{env.APP_ENVIRONMENT_SOURCE}}").from.name')

            if [ -z "$IMAGE_SHA" ]; then
              echo "Warning: No image SHA found for $component_name in ${APP_ENVIRONMENT_SOURCE} environment. Skipping tag operation."
              return 1
            fi

            echo "$component_name image sha being promoted: $IMAGE_SHA"
            # oc tag -n ${{env.OPENSHIFT_NAMESPACE}} "$component_name":${{env.APP_ENVIRONMENT_SOURCE}} "$component_name":${{env.APP_ENVIRONMENT_DESTINATION}}
          }

          if ${{ github.event.inputs.promote_registry_portal }}; then
            promote_component "registry-portal"
          else
            echo "Skipping Registry Portal promotion."
          fi

          if ${{ github.event.inputs.promote_api }}; then
            promote_component "api"
          else
            echo "Skipping API promotion."
          fi

          # #grabs the image sha for our input environments using jq
          # API_IMAGE_SHA=$(oc get is api -o json | jq -r '.spec.tags[] | select(.name == "${{env.APP_ENVIRONMENT_SOURCE}}").from.name')
          # REGISTRY_PORTAL_IMAGE_SHA=$(oc get is registry-portal -o json | jq -r '.spec.tags[] | select(.name == "${{env.APP_ENVIRONMENT_SOURCE}}").from.name')

          # echo registry-portal image sha being promoted: $REGISTRY_PORTAL_IMAGE_SHA
          # echo api image sha being promoted: $API_IMAGE_SHA

          # oc tag -n ${{env.OPENSHIFT_NAMESPACE}} registry-portal:${{env.APP_ENVIRONMENT_SOURCE}} registry-portal:${{env.APP_ENVIRONMENT_DESTINATION}}
          # oc tag -n ${{env.OPENSHIFT_NAMESPACE}} api:${{env.APP_ENVIRONMENT_SOURCE}} api:${{env.APP_ENVIRONMENT_DESTINATION}}
